}
task_a_mle_est_fp <- optim(par=c(-1,5,-1,-2), fn=task_a_mle_fun_fp, y=task_a_centroid_cor_fp_data)
beta_par_fp <- exp(task_a_mle_est_fp$par[1:2])
beta_par_fp
prob_par_fp <- exp(task_a_mle_est_fp$par[3:4])
prob_par_fp
task_a_mle_est_fp
exp(0)
0.3322095+5.8759112+1
0.3322095/7.208121
5.8759112/7.208121
1/7.208121
sum(prob_par_fp)
sum(prob_par_fp,1)
prob_par_fp[3]/prob_par_fp
prob_par_fp[1]/prob_par_fp
prob_par_fp[3]/sum(prob_par_fp,1)
prob_par_fp[1]/sum(prob_par_fp,1)
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape2 = shape_par[1], shape1 = shape_par[2]),from=-1, to=1, col="blue",add=TRUE)
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape2 = beta_par_fp[1], shape1 = beta_par_fp[2]),from=-1, to=1, col="blue",add=TRUE)
task_a_centroid_cor_fp %>%
filter(centroid_cor != max(centroid_cor)) %>%
pull(centroid_cor)  -> task_a_centroid_cor_fp_data
task_a_mle_fun_fp <- function(par, y) {
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
probs= exp(c(par[3:4],0))
density = (probs[1]/sum(probs))*0.5*dbeta((y+1)/2, shape1 = exp(par[1]), shape2 = exp(par[2])) +
(probs[2]/sum(probs))*0.5*dbeta((y+1)/2, shape2 = exp(par[1]), shape1 = exp(par[2])) +
(probs[3]/sum(probs))* dnorm(y,0, sd)
-sum(log(density))
}
task_a_mle_est_fp <- optim(par=c(-1,5,-1,-2), fn=task_a_mle_fun_fp, y=task_a_centroid_cor_fp_data)
beta_par_fp <- exp(task_a_mle_est_fp$par[1:2])
beta_par_fp
prob_par_fp <- exp(task_a_mle_est_fp$par[3:4])
prob_par_fp
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape2 = beta_par_fp[1], shape1 = beta_par_fp[2]),from=-1, to=1, col="blue")
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),from=-1, to=1, col="blue")
prob_par_fp[1]
prob_par_fp[2]
curve(prob_par_fp[2]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),from=-1, to=1, col="blue",add=TRUE)
curve(prob_par_fp[2]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),from=-1, to=1, col="blue")
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),from=-1, to=1, col="blue",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(exp(0)/sum(prob_par_fp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
curve(prob_par_fp[2]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),from=-1, to=1, col="red")
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),from=-1, to=1, col="blue",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(exp(0)/sum(prob_par_fp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
curve(prob_par_fp[2]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),from=-1, to=1, col="red")
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),from=-1, to=1, col="blue",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(exp(1)/sum(prob_par_fp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
curve(prob_par_fp[2]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),from=-1, to=1, col="red")
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),from=-1, to=1, col="blue",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(1/sum(prob_par_fp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
task_a_mle_fun_fp <- function(par, y) {
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
probs= exp(c(par[3:4],0))
density = (probs[1]/sum(probs))*0.5*dbeta((y+1)/2, shape2 = exp(par[1]), shape1 = exp(par[2])) +
(probs[2]/sum(probs))*0.5*dbeta((y+1)/2, shape1 = exp(par[1]), shape2= exp(par[2])) +
(probs[3]/sum(probs))* dnorm(y,0, sd)
-sum(log(density))
}
task_a_mle_est_fp <- optim(par=c(-1,5,-1,-2), fn=task_a_mle_fun_fp, y=task_a_centroid_cor_fp_data)
beta_par_fp <- exp(task_a_mle_est_fp$par[1:2])
prob_par_fp <- exp(task_a_mle_est_fp$par[3:4])
prob_par_fp
curve(prob_par_fp[2]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),from=-1, to=1, col="red")
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),from=-1, to=1, col="blue",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(1/sum(prob_par_fp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
prob_par_fp
beta_par_fp
task_a_mle_fun_fp <- function(par, y) {
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
probs= exp(c(par[3:4],0))
density = (probs[1]/sum(probs))*0.5*dbeta((y+1)/2, shape2 = exp(par[1]), shape1 = exp(par[2])) +
(probs[2]/sum(probs))*0.5*dbeta((y+1)/2, shape1 = exp(par[1]), shape2= exp(par[2])) +
(probs[3]/sum(probs))* dnorm(y,0, sd)
-sum(log(density))
}
task_a_mle_est_fp <- optim(par=c(-1,5,-1,-2), fn=task_a_mle_fun_fp, y=task_a_centroid_cor_fp_data)
beta_par_fp <- exp(task_a_mle_est_fp$par[1:2])
prob_par_fp <- exp(task_a_mle_est_fp$par[3:4])
beta_par_fp
prob_par_fp
task_a_mle_fun_fp <- function(par, y) {
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
probs= exp(c(par[3:4],0))
density = (probs[1]/sum(probs))*0.5*dbeta((y+1)/2, shape1 = exp(par[1]), shape2 = exp(par[2])) +
(probs[2]/sum(probs))*0.5*dbeta((y+1)/2, shape1 = exp(par[2]), shape2= exp(par[1])) +
(probs[3]/sum(probs))* dnorm(y,0, sd)
-sum(log(density))
}
task_a_mle_est_fp <- optim(par=c(-1,5,-1,-2), fn=task_a_mle_fun_fp, y=task_a_centroid_cor_fp_data)
beta_par_fp <- exp(task_a_mle_est_fp$par[1:2])
prob_par_fp <- exp(task_a_mle_est_fp$par[3:4])
prob_par_fp
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),from=-1, to=1, col="blue",add=TRUE)
curve(prob_par_fp[2]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),from=-1, to=1, col="red")
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(1/sum(prob_par_fp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
curve(prob_par_fp[2]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),from=-1, to=1, col="red")
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),from=-1, to=1, col="blue",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(1/sum(prob_par_fp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
curve(prob_par_fp[2]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),from=-1, to=1, col="blue")
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),from=-1, to=1, col="red",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(1/sum(prob_par_fp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
prob_par_fp
curve(prob_par_fp[2]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),from=-1, to=1, col="blue")
curve(prob_par_fp[1]/sum(prob_par_fp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),from=-1, to=1, col="red",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(1/sum(prob_par_fp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
task_a_centroid_cor_fp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_fp$centroid_cor+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_fp$centroid_cor+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),
curve_middle = (dnorm(task_a_centroid_cor_fp$centroid_cor, 0, sd))) %>%
filter(centroid_cor != max(centroid_cor)) -> task_a_value_assigned_fp
task_a_value_assigned_fp
View(task_a_value_assigned_fp)
task_a_centroid_cor_fp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_fp$centroid_cor+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_fp$centroid_cor+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),
curve_middle = (dnorm(task_a_centroid_cor_fp$centroid_cor, 0, sd))) -> task_a_value_assigned_fp
task_a_value_assigned_fp %>%
select(-id2) %>%
arrange(desc(task_a_value_assigned_fp$curve_constant))-> task_a_value_only_fp
View(task_a_value_only_fp)
task_a_centroid_cor_fp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_fp$centroid_cor+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_fp$centroid_cor+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),
curve_middle = (dnorm(task_a_centroid_cor_fp$centroid_cor, 0, sd))) %>%
# filter the centroid participant out because it is not represented properly in this data set, and we will include it later.
filter(centroid_cor != max(centroid_cor)) -> task_a_value_assigned_fp
task_a_value_assigned_fp %>%
select(-id2) %>%
arrange(desc(task_a_value_assigned_fp$curve_constant))-> task_a_value_only_fp
task_a_value_only_fp  %>%
rowwise() %>%
mutate(ratio_constant = curve_constant/curve_middle,
ratio_randomizer1 = curve_middle/curve_constant,
ratio_randomizer2 = curve_middle/curve_reverser,
ratio_reverser = curve_reverser/curve_middle,
ratio = NA) -> task_a_value_only_fp
task_a_value_only_fp$ratio[1:162] <- task_a_value_only_fp$ratio_constant[1:162]
task_a_value_only_fp$ratio[163:180] <- task_a_value_only_fp$ratio_randomizer1[163:180]
task_a_value_only_fp$ratio[181:192] <- task_a_value_only_fp$ratio_randomizer2[181:192]
task_a_value_only_fp$ratio[193:202] <- task_a_value_only_fp$ratio_reverser[193:202]
task_a_value_only_fp %>%
select(-ratio_constant, -ratio_randomizer1, -ratio_randomizer2, -ratio_reverser) ->
task_a_ratio_fp
View(task_a_ratio_fp)
task_a_ratio_fp %>%
filter(curve_middle< curve_constant) -> task_a_constant_fp
task_a_constant_fp$id1-> constant_id_fp
View(task_a_constant_fp)
View(task_a_constant_fp)
task_a_ratio_fp %>%
filter(curve_middle< curve_reverser) -> task_a_reverser_fp
task_a_reverser_fp$id1 -> reverser_id_fp
View(task_a_reverser_fp)
task_a_ratio_fp %>%
arrange(desc(ratio)) %>%
# We filter participant's ration under 10 meaning we don't have enough confidence which cluster
# they should be put in.
filter(ratio>10) -> task_a_ratio_fp
task_a_ratio_fp %>%
filter(curve_middle< curve_reverser) -> task_a_reverser_fp
task_a_reverser_fp$id1 -> reverser_id_fp
task_a_centroid_cor_fp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_fp$centroid_cor+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_fp$centroid_cor+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),
curve_middle = (dnorm(task_a_centroid_cor_fp$centroid_cor, 0, sd))) %>%
# filter the centroid participant out because it is not represented properly in this data set, and we will put it in later.
filter(centroid_cor != max(centroid_cor))  %>%
select(-id2) %>%
arrange(desc(task_a_value_assigned_fp$curve_constant))-> task_a_value_only_fp
task_a_value_only_fp  %>%
rowwise() %>%
mutate(ratio_constant = curve_constant/curve_middle,
ratio_randomizer1 = curve_middle/curve_constant,
ratio_randomizer2 = curve_middle/curve_reverser,
ratio_reverser = curve_reverser/curve_middle,
ratio = NA) -> task_a_value_only_fp
View(task_a_value_only_fp)
write.csv(fp_taska, ".git/Dataset/fp_taska.csv", row.names=FALSE)
task_a_centroid_cor_fp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_fp$centroid_cor+1)/2, shape1 = beta_par_fp[2], shape2 = beta_par_fp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_fp$centroid_cor+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),
curve_middle = (dnorm(task_a_centroid_cor_fp$centroid_cor, 0, sd))) %>%
# filter the centroid participant out because it is not represented properly in this data set, and we will put it in later.
filter(centroid_cor != max(centroid_cor))  %>%
select(-id2) %>%
arrange(desc(task_a_value_assigned_fp$curve_constant))-> task_a_density_value_fp
task_a_density_value_fp  %>%
rowwise() %>%
mutate(ratio_constant = curve_constant/curve_middle,
ratio_randomizer1 = curve_middle/curve_constant,
ratio_randomizer2 = curve_middle/curve_reverser,
ratio_reverser = curve_reverser/curve_middle,
ratio = NA) -> task_a_density_value_fp
# From 1-162, curve_constant > curve_middle.
task_a_density_value_fp$ratio[1:162] <- task_a_density_value_fp$ratio_constant[1:162]
# From 163-180, curve_middle > curve_constant.
task_a_density_value_fp$ratio[163:180] <- task_a_density_value_fp$ratio_randomizer1[163:180]
# From 181-192, curve_middle > curve_reverser.
task_a_density_value_fp$ratio[181:192] <- task_a_density_value_fp$ratio_randomizer2[181:192]
# From 193-202, curve_reverser > curve_middle.
task_a_density_value_fp$ratio[193:202] <- task_a_density_value_fp$ratio_reverser[193:202]
task_a_density_value_fp %>%
select(-ratio_constant, -ratio_randomizer1, -ratio_randomizer2, -ratio_reverser) ->
task_a_ratio_fp
task_a_ratio_fp %>%
arrange(desc(ratio)) %>%
# We filter any ration values under 10, meaning we don't have enough confidence which cluster
# they should be put in.
filter(ratio>10) -> task_a_ratio_fp
# We are interested who are constant value givers and reversers.
task_a_ratio_fp %>%
filter(curve_middle< curve_constant) -> task_a_constant_fp
task_a_constant_fp$id1-> constant_id_fp
task_a_ratio_fp %>%
filter(curve_middle< curve_reverser) -> task_a_reverser_fp
task_a_reverser_fp$id1 -> reverser_id_fp
fp[c(constant_id_fp),] -> constant_fp
fp[c(reverser_id_fp),] -> reverser_fp
fp[c(fp$id==14),] -> centroid_fp
max <- 16
mim <- 1
(reverser_fp[1:17] - max/2) * (-1) -> reverser_fp_cal
reverser_fp_cal + max/2 +mim -> reverser_fp_flipped
# Organized and combined clean data set, FP.
reverser_fp_flipped %>%
add_column(id = reverser_fp$id) %>%
add_column(item_string = reverser_fp$item_string) -> reverser_fp_flipped
constant_fp %>%
add_row(reverser_fp_flipped) %>%
add_row(centroid_fp)-> fp_taska_cleansed
write.csv(fp_taska_cleansed, ".git/Dataset/fp_taska.csv", row.names=FALSE)
write.csv(fp_taska_cleansed, ".Fertility_probability_judgement/Dataset/fp_taska.csv", row.names=FALSE)
write.csv(fp_taska_cleansed, "Fertility_probability_judgement/Dataset/fp_taska.csv", row.names=FALSE)
write.csv(fp_taska_cleansed, "Fertility_probability_judgement/Dataset/fp_taska_cleansed.csv", row.names=FALSE)
setwd("~/Fertility_probability_judgement/Codes/Simulation")
task_a_centroid_cor_hcp %>%
filter(centroid_cor != max(centroid_cor)) %>%
pull(centroid_cor)  -> task_a_centroid_cor_hcp_data
task_a_mle_fun_hcp <- function(par, y) {
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
probs= exp(c(par[3:4],0))
density = (probs[1]/sum(probs))*0.5*dbeta((y+1)/2, shape1 = exp(par[1]), shape2 = exp(par[2])) +
(probs[2]/sum(probs))*0.5*dbeta((y+1)/2, shape1 = exp(par[2]), shape2 = exp(par[1])) +
(probs[3]/sum(probs))* dnorm(y,0, sd)
-sum(log(density))
}
task_a_mle_est_hcp <- optim(par=c(-1,5,-1,-2), fn=task_a_mle_fun_hcp, y=task_a_centroid_cor_hcp_data)
beta_par_hcp <- exp(task_a_mle_est_hcp$par[1:2])
prob_par_hcp <- exp(task_a_mle_est_hcp$par[3:4])
curve(prob_par_hcp[2]/sum(prob_par_hcp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_hcp[2], shape2 = beta_par_hcp[1]),from=-1, to=1, col="blue")
curve(prob_par_hcp[1]/sum(prob_par_hcp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_hcp[1], shape2 = beta_par_hcp[2]),from=-1, to=1, col="red",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(1/sum(prob_par_hcp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
# Data exclusion
task_a_centroid_cor_hcp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape2 = beta_par_fp[2], shape1 = beta_par_fp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),
curve_middle = (dnorm(task_a_centroid_cor_hcp$centroid_cor, 0, sd))) %>%
filter(centroid_cor != max(centroid_cor)) %>%
select(-id2) %>%
arrange(desc(curve_constant))-> task_a_density_value_hcp
task_a_density_value_hcp  %>%
rowwise() %>%
mutate(ratio1_130 = curve_most/curve_middle,
ratio131_145 = curve_middle/curve_most,
ratio146_148 = curve_middle/curve_r,
ratio149_152 = curve_r/curve_middle,
ratio = NA) -> cor_h_only_taska
task_a_density_value_hcp  %>%
rowwise() %>%
mutate(ratio1_130 = curve_constant/curve_middle,
ratio131_145 = curve_middle/curve_constant,
ratio146_148 = curve_middle/curve_reverser,
ratio149_152 = curve_reverser/curve_middle,
ratio = NA) -> cor_h_only_taska
task_a_density_value_hcp  %>%
rowwise() %>%
mutate(ratio1_130 = curve_constant/curve_middle,
ratio131_145 = curve_middle/curve_constant,
ratio146_148 = curve_middle/curve_reverser,
ratio149_152 = curve_reverser/curve_middle,
ratio = NA) -> task_a_density_value_hcp
View(task_a_density_value_hcp)
task_a_density_value_hcp  %>%
rowwise() %>%
mutate(ratio1_130 = curve_constant/curve_middle,
ratio131_145 = curve_middle/curve_constant,
ratio146_148 = curve_middle/curve_reverser,
ratio149_152 = curve_reverser/curve_middle,
ratio = NA) -> task_a_density_value_hcp
task_a_centroid_cor_hcp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape2 = beta_par_fp[2], shape1 = beta_par_fp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),
curve_middle = (dnorm(task_a_centroid_cor_hcp$centroid_cor, 0, sd))) %>%
filter(centroid_cor != max(centroid_cor)) %>%
select(-id2) %>%
arrange(desc(curve_constant))-> task_a_density_value_hcp
# Load Fertility Health Care Professional (HCP) dataset.
fertility_doctors = here::here("Fertility_probability_judgement/Dataset/HCP_n263.sav")
hcp_all = haven::read_sav(fertility_doctors)
colnames(hcp_all) %>%
grepl(pattern = '^task_a_') %>%
which() -> task_a_columns_hcp
hcp <- hcp_all %>%
select(task_a_columns_hcp, item_string)  %>%
mutate(id = row_number())
expand.grid(id1 = hcp$id, id2 = 33) %>% # Create a data frame that contains all combinations of IDs
mutate(
centroid_cor = purrr::map2_dbl(id1, id2, function(id1, id2){
id1_responses = unlist(hcp[hcp$id == id1, task_a_columns_cleanhcp])
id2_responses = unlist(hcp[hcp$id == id2, task_a_columns_cleanhcp])
cor(id1_responses, id2_responses, method = 'k', use = 'pairwise')
})
) %>%
filter(
!is.na(centroid_cor)
) -> task_a_centroid_cor_hcp
colnames(hcp) %>%
grepl(pattern = '^task_a_') %>%
which() -> task_a_columns_cleanhcp
expand.grid(id1 = hcp$id, id2 = 33) %>% # Create a data frame that contains all combinations of IDs
mutate(
centroid_cor = purrr::map2_dbl(id1, id2, function(id1, id2){
id1_responses = unlist(hcp[hcp$id == id1, task_a_columns_cleanhcp])
id2_responses = unlist(hcp[hcp$id == id2, task_a_columns_cleanhcp])
cor(id1_responses, id2_responses, method = 'k', use = 'pairwise')
})
) %>%
filter(
!is.na(centroid_cor)
) -> task_a_centroid_cor_hcp
View(task_a_centroid_cor_hcp)
task_a_centroid_cor_hcp %>%
filter(centroid_cor != max(centroid_cor)) %>%
pull(centroid_cor)  -> task_a_centroid_cor_hcp_data
task_a_mle_fun_hcp <- function(par, y) {
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
probs= exp(c(par[3:4],0))
density = (probs[1]/sum(probs))*0.5*dbeta((y+1)/2, shape1 = exp(par[1]), shape2 = exp(par[2])) +
(probs[2]/sum(probs))*0.5*dbeta((y+1)/2, shape1 = exp(par[2]), shape2 = exp(par[1])) +
(probs[3]/sum(probs))* dnorm(y,0, sd)
-sum(log(density))
}
task_a_mle_est_hcp <- optim(par=c(-1,5,-1,-2), fn=task_a_mle_fun_hcp, y=task_a_centroid_cor_hcp_data)
beta_par_hcp <- exp(task_a_mle_est_hcp$par[1:2])
prob_par_hcp <- exp(task_a_mle_est_hcp$par[3:4])
curve(prob_par_hcp[2]/sum(prob_par_hcp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_hcp[2], shape2 = beta_par_hcp[1]),from=-1, to=1, col="blue")
curve(prob_par_hcp[1]/sum(prob_par_hcp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_hcp[1], shape2 = beta_par_hcp[2]),from=-1, to=1, col="red",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(1/sum(prob_par_hcp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
View(task_a_centroid_cor_hcp)
task_a_centroid_cor_hcp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape2 = beta_par_fp[2], shape1 = beta_par_fp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),
curve_middle = (dnorm(task_a_centroid_cor_hcp$centroid_cor, 0, sd))) %>%
filter(centroid_cor != max(centroid_cor)) %>%
select(-id2) %>%
arrange(desc(curve_constant))-> task_a_density_value_hcp
task_a_mle_fun_hcp <- function(par, y) {
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
probs= exp(c(par[3:4],0))
density = (probs[1]/sum(probs))*0.5*dbeta((y+1)/2, shape1 = exp(par[1]), shape2 = exp(par[2])) +
(probs[2]/sum(probs))*0.5*dbeta((y+1)/2, shape1 = exp(par[2]), shape2 = exp(par[1])) +
(probs[3]/sum(probs))* dnorm(y,0, sd)
-sum(log(density))
}
task_a_mle_est_hcp <- optim(par=c(-1,5,-1,-2), fn=task_a_mle_fun_hcp, y=task_a_centroid_cor_hcp_data)
beta_par_hcp <- exp(task_a_mle_est_hcp$par[1:2])
prob_par_hcp <- exp(task_a_mle_est_hcp$par[3:4])
beta_par_hcp
prob_par_hcp
curve(prob_par_hcp[2]/sum(prob_par_hcp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_hcp[2], shape2 = beta_par_hcp[1]),from=-1, to=1, col="blue")
curve(prob_par_hcp[1]/sum(prob_par_hcp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_hcp[1], shape2 = beta_par_hcp[2]),from=-1, to=1, col="red",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(1/sum(prob_par_hcp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
curve(prob_par_hcp[2]/sum(prob_par_hcp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_hcp[2], shape2 = beta_par_hcp[1]),from=-1, to=1, col="blue")
curve(prob_par_hcp[1]/sum(prob_par_hcp,1)*0.5*dbeta((x+1)/2, shape1 = beta_par_hcp[1], shape2 = beta_par_hcp[2]),from=-1, to=1, col="red",add=TRUE)
n=15
sd=sqrt(2*(2*n+5)/(9*n*(n-1)))
curve(1/sum(prob_par_hcp,1)*dnorm(x, 0, sd),from=-1, to=1, add = TRUE, col="green")
task_a_centroid_cor_hcp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape2 = beta_par_fp[2], shape1 = beta_par_fp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape1 = beta_par_fp[1], shape2 = beta_par_fp[2]),
curve_middle = (dnorm(task_a_centroid_cor_hcp$centroid_cor, 0, sd))) %>%
filter(centroid_cor != max(centroid_cor)) %>%
select(-id2) %>%
arrange(desc(curve_constant))-> task_a_density_value_hcp
task_a_centroid_cor_hcp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape2 = beta_par_hcp[2], shape1 = beta_par_hcp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape1 = beta_par_hcp[1], shape2 = beta_par_hcp[2]),
curve_middle = (dnorm(task_a_centroid_cor_hcp$centroid_cor, 0, sd))) %>%
filter(centroid_cor != max(centroid_cor)) %>%
select(-id2) %>%
arrange(desc(curve_constant))-> task_a_density_value_hcp
task_a_centroid_cor_hcp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape2 = beta_par_hcp[2], shape1 = beta_par_hcp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape1 = beta_par_hcp[1], shape2 = beta_par_hcp[2]),
curve_middle = (dnorm(task_a_centroid_cor_hcp$centroid_cor, 0, sd))) %>%
filter(centroid_cor != max(centroid_cor)) %>%
select(-id2) %>%
arrange(desc(curve_constant))-> task_a_density_value_hcp
View(task_a_density_value_hcp)
View(task_a_centroid_cor_hcp)
task_a_centroid_cor_hcp %>%
mutate(curve_constant = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape1 = beta_par_hcp[2], shape2 = beta_par_hcp[1]),
curve_reverser = 0.5*dbeta((task_a_centroid_cor_hcp$centroid_cor+1)/2, shape1 = beta_par_hcp[1], shape2 = beta_par_hcp[2]),
curve_middle = (dnorm(task_a_centroid_cor_hcp$centroid_cor, 0, sd))) %>%
filter(centroid_cor != max(centroid_cor)) %>%
select(-id2) %>%
arrange(desc(curve_constant))-> task_a_density_value_hcp
fertility_patient = here::here("Fertility_probability_judgement/Dataset/fp_taska_cleansed.csv")
fp_all = haven::read_csv(fertility_patient)
fertility_patient = here::here("Fertility_probability_judgement/Dataset/fp_taska_cleansed.csv")
fp_all = haven::read.csv(fertility_patient)
fertility_patient = here::here("Fertility_probability_judgement/Dataset/fp_taska_cleansed.csv")
fp_all = haven::read_csv(fertility_patient)
fertility_patient = here::here("Fertility_probability_judgement/Dataset/fp_taska_cleansed.csv")
fp = read_csv(fertility_patient)
View(fp)
fertility_doctors = here::here("Fertility_probability_judgement/Dataset/hcp_taska_cleansed.csv")
hcp = read_csv(fertility_doctors)
View(hcp)
here::here()
lwv = here::here("Moral_Identity_Study/Data/leftwingvalues.csv")
lwv = read_csv(lwv)
lwv = here::here("Moral_Identity_Study/Data/leftwingvalues.csv")
lwv = read_csv(lwv)
rwv = here::here("Moral_Identity_Study/Data/rightwingvalues.csv")
rwv = read_csv(rwv)
lpmidp = here::here("Moral_Identity_Study/Data/lpmidpoint.sav")
lpmidp = read_sav(lpmidp)
lwv = read_csv(lwv)
lwv = here::here("Moral_Identity_Study/Data/leftwingvalues.csv")
lwv = read_csv(lwv)
rwv = here::here("Moral_Identity_Study/Data/rightwingvalues.csv")
rwv = read_csv(rwv)
lpmidp = here::here("Moral_Identity_Study/Data/lpmidpoint.sav")
lpmidp = read_sav(lpmidp)
View(lpmidp)
head(lwv)
head(rwv)
head(lpmidp)
View(lpmidp)
head(lwv)
View(lwv)
View(lpmidp)
colnames(lwv)
View(lwv)
View(lwv)
lwv = read_csv(lwv)
library(tidyverse)
library(tidyr)
library(haven)
library(dplyr)
library(gdata) #remane.vars
library(data.table) #sprsplit & table
library(here)
library(renv)
library(data.table)
library(ggplot2)
library(ggridges)
lwv = here::here("Moral_Identity_Study/Data/leftwingvalues.csv")
lwv = read_csv(lwv)
View(lwv)
grepl()
?grepl
colnames(lwv) %>%
grepl(pattern = '^name') %>%
which() -> columns
library(tidyverse)
library(tidyr)
library(haven)
library(dplyr)
library(gdata) #remane.vars
library(data.table) #sprsplit & table
library(here)
library(renv)
library(data.table)
library(ggplot2)
library(ggridges)
options(rstudio.help.showDataPreview = FALSE)
